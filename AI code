# Importing necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
def load_data():
    # Load Iris dataset
    data = load_iris()
    df = pd.DataFrame(data.data, columns=data.feature_names)
    df['target'] = data.target
    return df

# Data Preprocessing
def preprocess_data(df):
    # Separate features and target
    X = df.drop('target', axis=1)
    y = df['target']
    
    # Split data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    
    # Standardizing the features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    return X_train_scaled, X_test_scaled, y_train, y_test

# Train and evaluate model
def train_and_evaluate_model(X_train, X_test, y_train, y_test):
    # Instantiate classifiers
    classifiers = {
        "Decision Tree": DecisionTreeClassifier(),
        "Random Forest": RandomForestClassifier(),
        "Logistic Regression": LogisticRegression(),
        "Support Vector Classifier": SVC()
    }
    
    # Loop through classifiers, train and evaluate each one
    for name, clf in classifiers.items():
        print(f"Training {name}...")
        clf.fit(X_train, y_train)
        y_pred = clf.predict(X_test)
        
        # Model evaluation
        accuracy = accuracy_score(y_test, y_pred)
        cm = confusion_matrix(y_test, y_pred)
        cr = classification_report(y_test, y_pred)
        
        print(f"{name} Accuracy: {accuracy * 100:.2f}%")
        print(f"Confusion Matrix for {name}:\n{cm}")
        print(f"Classification Report for {name}:\n{cr}")
        
        # Plot confusion matrix
        plt.figure(figsize=(5,5))
        sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=data.target_names, yticklabels=data.target_names)
        plt.title(f"Confusion Matrix for {name}")
        plt.ylabel('True label')
        plt.xlabel('Predicted label')
        plt.show()

# Main function to run the entire process
def main():
    # Load data
    df = load_data()
    
    # Preprocess data
    X_train, X_test, y_train, y_test = preprocess_data(df)
    
    # Train and evaluate model
    train_and_evaluate_model(X_train, X_test, y_train, y_test)

# Run the program
if __name__ == "__main__":
    main()
